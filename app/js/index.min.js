let chess=$("#chess"),turnLabel=$("#turn"),quantityLabel=$("#quantity"),black_points=0,white_points=0,data={},history=[];function load(){messageShow("Start"),fetch("/data/initial.json").then(t=>t.json()).catch(t=>console.error("Error:",t)).then(t=>{if(t){data=t;for(let a=0;a<data.board.cols;a++){let e=`<div id="${data.cols[a]}" class="col">`;for(let i=0;i<data.board.rows;i++)e=`${e}<div id="${data.cols[a]}${i+1}" col="${a+1}" row="${i+1}" class="cell ${data.board.classes[(a+i)%2]}" ondrop="drop(event)" ondragover="allowDrop(event)"></div>`;e=`${e}</div>`,chess.html(`${chess.html()}${e}`)}data.army_members.forEach(t=>{for(let a=0;a<t.initial_quantity;a++){let e=$(`#${t.initial_col.split(",")[a]}${t.initial_row}`),i=e.attr("col");e&&e.html(`<icon id="${t.id}" title="${t.name} ${t.id}" side="${t.side}" name="${t.name}" symbol="${t.symbol}" class="${t.name} ${t.side}" row="${t.initial_row}" col="${i}" points="${t.material_points}" state="initial" draggable="true" ondragstart="drag(event)" />`)}})}})}function allowDrop(t){t.preventDefault()}function drag(t){t.target.getAttribute("side").includes(data.side)&&t.dataTransfer.setData("id",t.target.id)}function changeTurn(){data.turn=data.turn+1,data.side=data.sides[data.turn%data.sides.length]}function messageShow(t){document.getElementById("message").innerHTML=t;let a=document.getElementById("overlay");a.style.display="block",setTimeout(()=>{a.style.display="none"},3e3)}function addToMovementsTable(t){let a=$("#movements tbody"),e=t.id+" -> "+t.pos.final.row+data.cols[t.pos.final.col-1],i=`<tr>
  <td>${"white"===t.side?e:""}</td>
  <td>${"black"===t.side?e:""}</td>
  <td>${t.time}</td>
  </tr>`;a.append(i)}load();